name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

defaults:
  run:
    shell: bash

env:
  TEST_NGINX_RANDOMIZE: 1

jobs:
  tests:
    name: 'Tests - unit'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    env:
      NGX_BUILD_GCOV: 1
    #if: ${{ false }}
    strategy:
      fail-fast: false
      # When adding or removing to the build matrix,
      # make sure the value of after_n_builds in codecov.yml
      # matches the number of entries in this matrix.
      matrix:
        os: [ubuntu-latest]
        cc: [gcc-8]
        ngx: [1.23.2]
        runtime: [wasmer]
        wasmer: [3.0.2]
        hup: [0]
        debug: [1, 0]
        include:
          # Wasmtime
          - os: ubuntu-latest
            cc: gcc-8
            ngx: 1.23.2
            runtime: wasmtime
            wasmtime: 0.38.1
            hup: 1
            debug: 1
          # V8
          - os: ubuntu-latest
            cc: gcc-8
            ngx: 1.23.2
            runtime: v8
            v8: 10.5.18
          # OpenResty
          - os: ubuntu-latest
            cc: gcc-8
            openresty: 1.21.4.1
            runtime: wasmtime
            wasmtime: 0.38.1
            debug: 1
          # Old Nginx
          - os: ubuntu-latest
            cc: gcc-8
            ngx: 1.21.6
            runtime: wasmer
            wasmer: 3.0.2
            debug: 1
          # No SSL
          - os: ubuntu-latest
            cc: gcc-8
            ngx: 1.21.6
            runtime: wasmer
            wasmer: 3.0.2
            debug: 0
            no_ssl: 1
    steps:
      - run: sudo apt-get update && sudo apt-get install -y gcc-8 libstdc++-8-dev
        if: ${{ matrix.cc == 'gcc-8' }}
      - uses: actions/checkout@v3
      - name: "Setup cache - rustup toolchain"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/*
            ~/.rustup/update-hashes/*
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('.github/**/*.yml', '.github/**/*.sh') }}
      - name: "Setup cache - work/ dir"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ matrix.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - name: Setup gcov
        if: ${{ !env.ACT && env.NGX_BUILD_GCOV }}
        run: sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/$(echo ${{ matrix.cc }} | sed s/gcc/gcov/) 100
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-wasi
      - name: Setup TinyGo
        uses: acifani/setup-tinygo@v1
        with:
          tinygo-version: 0.25.0
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ matrix.runtime }} -V ${{ matrix[matrix.runtime] }}
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - run: make setup
      - run: make
        env:
          CC: ${{ matrix.cc }}
          NGX: ${{ matrix.ngx }}
          NGX_BUILD_SSL: ${{ !matrix.no_ssl && 1 }}
          NGX_BUILD_DEBUG: ${{ matrix.debug }}
          NGX_BUILD_OPENRESTY: ${{ matrix.openresty }}
      - run: make test
        if: ${{ !matrix.openresty }}
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
      - run: ./util/test.sh t/11-openresty
        if: ${{ matrix.openresty }}
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
      - uses: codecov/codecov-action@v3
        if: ${{ !env.ACT && matrix.cc == 'gcc-8' }}
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit
          env_vars: TEST_NGINX_USE_HUP
          fail_ci_if_error: true
      - uses: actions/upload-artifact@v2
        if: ${{ failure() && !env.ACT }}
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}-${{ matrix.runtime }}
          path: |
            work/buildroot/
            t/servroot*

  valgrind:
    name: 'Tests - valgrind'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 70
    #if: ${{ false }}
    env:
      NGX_BUILD_NOPOOL: 1
      NGX_BUILD_CC_OPT: '-O2'
      TEST_NGINX_TIMEOUT: 120
      TEST_NGINX_USE_VALGRIND: 1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        cc: [gcc-11]
        ngx: [1.23.2]
        runtime: [wasmer]
        wasmer: [3.0.2]
        hup: [0, 1]
        debug: [1]
        include:
          - os: ubuntu-22.04
            ngx: 1.23.2
            runtime: wasmtime
            wasmtime: 0.38.1
            hup: 0
            debug: 1
          - os: ubuntu-22.04
            cc: gcc-11
            ngx: 1.23.2
            runtime: v8
            v8: 10.5.18
            hup: 0
            debug: 1
    steps:
      - run: sudo apt-get update && sudo apt-get install -y valgrind
      - run: sudo apt-get install -y libstdc++-11-dev
        if: ${{ matrix.cc == 'gcc-11' }}
      - uses: actions/checkout@v3
      - name: "Setup cache - rustup toolchain"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/*
            ~/.rustup/update-hashes/*
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('.github/**/*.yml', '.github/**/*.sh') }}
      - name: "Setup cache - work/ dir"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ matrix.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-wasi
      - name: Setup TinyGo
        uses: acifani/setup-tinygo@v1
        with:
          tinygo-version: 0.25.0
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ matrix.runtime }} -V ${{ matrix[matrix.runtime] }}
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - run: make setup
      - run: make
        env:
          CC: ${{ matrix.cc }}
          NGX: ${{ matrix.ngx }}
          NGX_BUILD_DEBUG: ${{ matrix.debug }}
      - run: make test 2>&1 | tee valgrind.out
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
          TEST_NGINX_NO_CLEAN: 1
      - run: |
          awk -f ./util/parse-valgrind.awk valgrind.out > valgrind.log
          if [[ -s valgrind.log ]]; then
            cat valgrind.log >&2
            exit 1
          fi
      - uses: actions/upload-artifact@v2
        if: ${{ failure() && !env.ACT }}
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}-${{ matrix.runtime }}
          path: |
            work/buildroot/
            t/servroot*
            valgrind.out

  lint:
    name: 'Lint'
    runs-on: ubuntu-latest
    #if: ${{ false }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          components: clippy
      - uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ matrix.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - run: make setup
      - run: make lint
      - uses: actions-rs/clippy-check@v1
        if: ${{ !env.ACT }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - run: |
          if [[ $(make reindex 2>&1 | tee reindex.out | grep -c done) -gt 0 ]]; then
            cat reindex.out >&2
            exit 1
          fi

  analyzer:
    name: 'Clang analyzer'
    runs-on: ubuntu-latest
    #if: ${{ false }}
    env:
      NGX_BUILD_CLANG_ANALYZER: 1
    strategy:
      fail-fast: false
      matrix:
        cc: [clang-9]
        ngx: [1.23.2]
        runtime: [wasmtime]
        wasmtime: [0.38.1]
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -y $(echo ${{ matrix.cc }} | sed s/clang/clang-tools/)
          sudo update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/$(echo ${{ matrix.cc }} | sed s/clang/scan-build/) 100
      - uses: actions/checkout@v3
      - name: "Setup cache - work/ dir"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ matrix.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ matrix.runtime }} -V ${{ matrix[matrix.runtime] }}
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - run: make setup
      - run: make
        env:
          CC: ${{ matrix.cc }}
          NGX: ${{ matrix.ngx }}
      - uses: actions/upload-artifact@v2
        if: ${{ failure() && !env.ACT }}
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/scans/*

  build:
    name: 'Tests - build'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    #if: ${{ false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cc: [clang]
        ngx: [1.23.2]
        runtime: [wasmer, wasmtime, v8]
        wasmtime: [0.38.1]
        wasmer: [3.0.2]
        v8: [10.5.18]
        include:
          - os: ubuntu-latest
            cc: clang
            ngx: 1.21.6
            runtime: wasmtime
            wasmtime: 0.38.1
    steps:
      - run: sudo apt-get install -y gcc-8 libstdc++-8-dev
        if: ${{ matrix.cc == 'gcc-8' }}
      - uses: actions/checkout@v3
      - name: "Setup cache - work/ dir"
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ matrix.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ matrix.runtime }} -V ${{ matrix[matrix.runtime] }}
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - run: make setup
      - run: make test-build
        env:
          NGX_WASM_RUNTIME: ${{ matrix.runtime }}
