name: CI
on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
defaults:
  run:
    shell: bash

env:
  nginx: 1.19.1
  wasmtime: 0.19.0

jobs:

  tests:
    name: 'Tests - unit'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cc: [gcc-8]
        nginx: [1.19.1]
        wasmtime: [0.19.0]
        hup: [1, 0]
    steps:
      - name: Set up gcov
        run: sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/$(echo ${{ matrix.cc }} | sed s/gcc/gcov/) 100
      - name: Set up rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          target: wasm32-unknown-unknown
          default: true
      - uses: actions/checkout@v2
      - name: Set up wasmtime
        uses: ./.github/actions/wasmtime
        with:
          version: ${{ matrix.wasmtime }}
      - uses: actions/cache@v2
        id: cache
        with:
          path: work
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ hashFiles('.github/**/*.{yml,sh}') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: make setup
      - run: make
        env:
          NGX_BUILD_GCOV: 1
          NGX_BUILD_FORCE: 1
          CC: ${{ matrix.cc }}
          NGX: ${{ matrix.nginx }}
      - run: make test
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
      - uses: codecov/codecov-action@v1
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit
          env_vars: TEST_NGINX_USE_HUP
          fail_ci_if_error: true

  valgrind:
    name: 'Tests - valgrind'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    env:
      NGX_BUILD_NOPOOL: 1
      TEST_NGINX_USE_VALGRIND: 1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cc: [gcc-8]
        nginx: [1.17.8]
        wasmtime: [0.19.0]
        hup: [1, 0]
    steps:
      - run: sudo apt install -y valgrind
      - uses: actions-rs/toolchain@v1
        with:
          default: true
          toolchain: nightly
          target: wasm32-unknown-unknown
      - uses: actions/checkout@v2
      - uses: ./.github/actions/wasmtime
        with:
          version: ${{ matrix.wasmtime }}
      - uses: actions/cache@v2
        id: cache
        with:
          path: work
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ hashFiles('.github/**/*.{yml,sh}') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: make setup
      - run: make
        env:
          NGX_BUILD_FORCE: 1
          CC: ${{ matrix.cc }}
          NGX: ${{ matrix.nginx }}
      - run: make test 2>&1 | tee valgrind.out
        env:
          TEST_NGINX_USE_HUP: ${{ matrix.hup }}
      - run: |
          awk -f ./util/parse-valgrind.awk valgrind.out > valgrind.log
          if [[ -s valgrind.log ]]; then
            cat valgrind.log >&2
            exit 1
          fi
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: valgrind-leaks.log
          path: valgrind.log

  style:
    name: 'Style'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: work
          key: work-${{ runner.os }}-${{ matrix.cc }}-${{ matrix.ngx }}-${{ hashFiles('.github/**/*.{yml,sh}') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: make setup
      - run: make style
      - run: |
          if [[ $(make reindex 2>&1 | tee reindex.out | grep -c done) -gt 0 ]]; then
            cat reindex.out >&2
            exit 1
          fi
