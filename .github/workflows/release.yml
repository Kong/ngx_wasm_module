name: Release

on:
  schedule:
    - cron: '0 6 * * mon' # 6am UTC, 11pm PST
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (e.g. v0.1.0)'
        required: true

defaults:
  run:
    shell: bash

env:
  CC: clang
  RETENTION_DAYS: 2

jobs:
  setup-env:
    name: Setup environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          export NGX_WASM_DIR=$(pwd)
          . ./util/_lib.sh
          echo "WASMTIME_VER=$(get_variable_from_makefile WASMTIME)" >> $GITHUB_ENV
          echo "WASMER_VER=$(get_variable_from_makefile WASMER)" >> $GITHUB_ENV
          echo "V8_VER=$(get_variable_from_makefile V8)" >> $GITHUB_ENV

  build-images:
    name: Build Docker binary build images
    needs: setup-env
    runs-on: ubuntu-latest
    outputs:
      release_name: ${{ steps.assign-name.outputs.release_name }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN_GITHUB }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: 'Ubuntu 18.04 build image'
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.ubuntu-18.04
          tags: ghcr.io/kong/wasmx-build-ubuntu:18.04
          push: true
      - name: 'Ubuntu 20.04 build image'
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.ubuntu-20.04
          tags: ghcr.io/kong/wasmx-build-ubuntu:20.04
          push: true
      - name: 'Centos 7 build image'
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.centos7
          tags: ghcr.io/kong/wasmx-build-centos:7
          push: true
      - name: 'Centos 8 build image'
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.centos8
          tags: ghcr.io/kong/wasmx-build-centos:8
          push: true
      - name: ArchLinux build image
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.archlinux
          tags: ghcr.io/kong/wasmx-build-arch:latest
          push: true
      - id: assign-name
        run: |
          if [ "${{ github.event_name }}" = schedule ]; then
            echo "release_name=nightly-$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT
          else
            echo "release_name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
          fi

  build-ubuntu-bionic:
    name: 'Build Ubuntu 18.04 (bionic) binary'
    needs: build-images
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kong/wasmx-build-ubuntu:18.04
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  build-ubuntu-focal:
    name: 'Build Ubuntu 20.04 (focal) binary'
    needs: build-images
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kong/wasmx-build-ubuntu:20.04
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  build-centos7:
    name: 'Build Centos 7 binary'
    needs: build-images
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kong/wasmx-build-centos:7
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  build-centos8:
    name: 'Build Centos 8 binary'
    needs: build-images
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kong/wasmx-build-centos:8
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  build-arch:
    name: Build ArchLinux binary
    needs: build-images
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/kong/wasmx-build-arch:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  build-macos:
    name: Build macOS binary
    needs: build-images
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew dependencies
        run: brew install ninja
      - name: Build binary
        run: ./util/release.sh ${{ needs.build-images.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/ngx_wasm_module_dist/build/*

  upload-artifacts:
    name: Upload release artifacts
    needs: [build-images, build-ubuntu-bionic, build-ubuntu-focal, build-centos7, build-centos8, build-arch, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve sibling release artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-artifacts
      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ github.event_name == 'schedule' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: nightly
          prerelease: true
          title: ${{ needs.build-images.outputs.release_name }}
          files: |
            *.tar.gz
      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ github.event_name != 'schedule' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: release-${{ needs.build-images.outputs.release_name }}
          prerelease: true
          title: ${{ needs.build-images.outputs.release_name }}
          files: |
            *.tar.gz
