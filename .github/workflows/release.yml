name: Release

on:
  schedule:
    - cron: "0 6 * * mon" # 6am UTC, 11pm PST
  workflow_dispatch:
    inputs:
      release_name:
        type: string
        description: "Release name (e.g. v0.1.0)"
        required: true
      create_release:
        type: boolean
        description: "Create release?"
        required: true
        default: false
      prerelease:
        type: boolean
        description: "Prerelease?"
        required: true
        default: true

defaults:
  run:
    shell: bash

env:
  CC: clang
  RETENTION_DAYS: 7

jobs:
  setup:
    name: "Setup release name & runtime versions"
    runs-on: ubuntu-latest
    outputs:
      wasmtime_ver: ${{ steps.assign-versions.outputs.wasmtime_ver }}
      wasmer_ver: ${{ steps.assign-versions.outputs.wasmer_ver }}
      v8_ver: ${{ steps.assign-versions.outputs.v8_ver }}
      create_release: ${{ steps.assign-name.outputs.create_release }}
      release_name: ${{ steps.assign-name.outputs.release_name }}
      release_channel: ${{ steps.assign-name.outputs.release_channel }}
    steps:
      - uses: actions/checkout@v3
      - id: assign-versions
        run: |
          export NGX_WASM_DIR=$(pwd)
          . ./util/_lib.sh
          echo "wasmtime_ver=$(get_variable_from_makefile WASMTIME)" >> $GITHUB_OUTPUT
          echo "wasmer_ver=$(get_variable_from_makefile WASMER)" >> $GITHUB_OUTPUT
          echo "v8_ver=$(get_variable_from_makefile V8)" >> $GITHUB_OUTPUT
      - id: assign-name
        run: |
          if [ "${{ github.event_name }}" = schedule ]; then
            # nightly
            echo "create_release=true" >> $GITHUB_OUTPUT
            echo "release_name=nightly-$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT
            echo "release_channel=nightly" >> $GITHUB_OUTPUT

          elif [ -n "${{ github.event.inputs.release_name }}" ]; then
            # release/prerelease
            echo "create_release=${{ github.event.inputs.create_release }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
            echo "release_channel=${{ github.event.inputs.prerelease == 'true' && 'prerelease' || 'release' }}" >> $GITHUB_OUTPUT

          else
            # GHA test run
            echo "create_release=false" >> $GITHUB_OUTPUT
            echo "release_name=gha-run-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

  source-release:
    name: "Source release"
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build archive
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --src
      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}

  build-images:
    name: "Build Docker compilation images"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN_GITHUB }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: "Ubuntu 18.04 build image"
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.ubuntu-18.04
          tags: ghcr.io/kong/wasmx-build-ubuntu:18.04
          push: true
      - name: "Ubuntu 20.04 build image"
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.ubuntu-20.04
          tags: ghcr.io/kong/wasmx-build-ubuntu:20.04
          push: true
      - name: "Ubuntu 22.04 build image"
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.ubuntu-22.04
          tags: ghcr.io/kong/wasmx-build-ubuntu:22.04
          platforms: linux/arm64,linux/amd64
          push: true
      - name: "Centos 7 build image"
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.centos7
          tags: ghcr.io/kong/wasmx-build-centos:7
          push: true
      - name: "Centos 8 build image"
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.centos8
          tags: ghcr.io/kong/wasmx-build-centos:8
          push: true
      - name: ArchLinux build image
        uses: docker/build-push-action@v2
        with:
          file: ./assets/release/Dockerfiles/Dockerfile.amd64.archlinux
          tags: ghcr.io/kong/wasmx-build-arch:latest
          push: true

  build-ubuntu-bionic:
    name: "Build Ubuntu 18.04 (bionic) binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-ubuntu:18.04
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-ubuntu-focal:
    name: "Build Ubuntu 20.04 (focal) binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-ubuntu:20.04
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-ubuntu-jammy:
    name: "Build Ubuntu 22.04 (jammy) binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-ubuntu:22.04
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}

  build-ubuntu-jammy-arm:
    name: "Build ARM Ubuntu 22.04 (jammy) binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN_GITHUB }}
      - run: |
          docker run \
              --platform=linux/arm64 \
              --volume $PWD:/wasmx \
              --volume $GITHUB_ENV:$GITHUB_ENV \
              -e CI \
              -e GITHUB_ENV \
              --env CARGO_NET_GIT_FETCH_WITH_CLI=true \
              --env WASMTIME_VER='${{ needs.setup.outputs.wasmtime_ver }}' \
              --env WASMER_VER='${{ needs.setup.outputs.wasmer_ver }}' \
              --env V8_VER='${{ needs.setup.outputs.v8_ver }}' \
              ghcr.io/kong/wasmx-build-ubuntu:22.04 \
              /wasmx/util/release.sh ${{ needs.setup.outputs.release_name }} --bin
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-centos7:
    name: "Build Centos 7 binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-centos:7
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-centos8:
    name: "Build Centos 8 binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-centos:8
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-arch:
    name: "Build ArchLinux binary"
    needs: [setup, build-images]
    runs-on: ubuntu-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    container:
      image: ghcr.io/kong/wasmx-build-arch:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  build-macos:
    name: "Build macOS binary"
    needs: [setup, build-images]
    runs-on: macos-latest
    env:
      WASMTIME_VER: ${{ needs.setup.outputs.wasmtime_ver }}
      WASMER_VER: ${{ needs.setup.outputs.wasmer_ver }}
      V8_VER: ${{ needs.setup.outputs.v8_ver }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Homebrew dependencies
        run: brew install ninja openssh
      - name: Build binary
        run: ./util/release.sh ${{ needs.setup.outputs.release_name }} --bin
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: release-artifacts
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}
          path: work/dist/build/*

  upload-artifacts:
    name: "Upload release artifacts"
    needs: [source-release, build-images, build-ubuntu-bionic, build-ubuntu-focal, build-ubuntu-jammy, build-ubuntu-jammy-arm, build-centos7, build-centos8, build-arch, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve sibling release artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-artifacts
      - name: Drop Wasmer binaries
        run: find . -name '*wasmer*' | xargs rm -f
        # Nightly
      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.setup.outputs.create_release == 'true' && needs.setup.outputs.release_channel == 'nightly' }}
        with:
          prerelease: true
          title: ${{ needs.setup.outputs.release_name }}
          automatic_release_tag: nightly
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            *.tar.gz
        # Prerelease
      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.setup.outputs.create_release == 'true' && needs.setup.outputs.release_channel == 'prerelease' }}
        with:
          draft: true
          prerelease: true
          title: Prerelease - ${{ needs.setup.outputs.release_name }}
          automatic_release_tag: prerelease-${{ needs.setup.outputs.release_name }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            *.tar.gz
        # Release
      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.setup.outputs.create_release == 'true' && needs.setup.outputs.release_channel == 'release' }}
        with:
          draft: true
          prerelease: false
          title: Release - ${{ needs.setup.outputs.release_name }}
          automatic_release_tag: release-${{ needs.setup.outputs.release_name }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            *.tar.gz
