name: Unit tests

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      cc:
        required: true
        type: string
      ngx:
        required: true
        type: string
      openresty:
        required: true
        type: string
      runtime:
        required: true
        type: string
      wasmtime:
        required: true
        type: string
      wasmer:
        required: true
        type: string
      v8:
        required: true
        type: string
      ipc:
        required: true
        type: string
      ssl:
        required: true
        type: string
      debug:
        required: true
        type: string
      hup:
        required: true
        type: string
      module_type:
        required: true
        type: string
      coverage:
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: bash

env:
  CC: ${{ inputs.cc }}
  NGX: ${{ inputs.ngx }}
  NGX_IPC: ${{ inputs.ipc == 'ipc' && 1 || 0 }}
  NGX_BUILD_OPENRESTY: ${{ inputs.openresty }}
  NGX_BUILD_GCOV: ${{ inputs.coverage && 1 || 0 }}
  NGX_BUILD_DEBUG: ${{ inputs.debug == 'debug' && 1 || 0 }}
  NGX_BUILD_SSL: ${{ inputs.ssl == 'ssl' && 1 || 0 }}
  NGX_BUILD_DYNAMIC_MODULE: ${{ inputs.module_type == 'dynamic' && 1 || 0 }}
  TEST_NGINX_USE_HUP: ${{ inputs.hup == 'hup' && 1 || 0 }}
  TEST_NGINX_TIMEOUT: 60
  TEST_NGINX_EXTERNAL_TIMEOUT: 60s
  TEST_NGINX_EXTERNAL_RESOLVER: 127.0.0.1:8053

jobs:
  tests:
    name: 'Unit tests'
    runs-on: ${{ inputs.os }}
    timeout-minutes: 90
    outputs:
      coveralls_name: ${{ steps.lcov.outputs.name }}
    steps:
      - name: 'Setup deps - apt-get'
        if: ${{ contains(inputs.os, 'ubuntu') }}
        run: sudo apt-get update && sudo apt-get install -y ${CC} libstdc++-${CC#*-}-dev lcov
      - uses: actions/checkout@v4
      - name: 'Setup cache - rustup toolchain'
        if: ${{ !env.ACT }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/*
            ~/.rustup/update-hashes/*
          key: rust-toolchain-${{ inputs.os }}-${{ hashFiles('.github/**/*.yml', '.github/**/*.sh', 'rust-toolchain') }}
      - name: 'Setup cache - work/ dir'
        if: ${{ !env.ACT }}
        uses: actions/cache@v4
        with:
          path: |
            work/downloads
            work/runtimes
            work/openssl
          key: work-${{ inputs.os }}-${{ inputs.cc }}-${{ inputs.ngx }}-${{ inputs.openresty }}-${{ inputs.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain', 'Makefile') }}
      - name: Setup Rust
        if: ${{ !env.ACT }}
        uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-wasi
      - name: Setup TinyGo
        if: ${{ !env.ACT }}
        uses: acifani/setup-tinygo@v2
        with:
          tinygo-version: 0.31.1
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ inputs.runtime }} -V ${{ inputs[inputs.runtime] }}
      - name: Setup local httpbin server
        #if: ${{ !env.ACT }}
        uses: ./.github/actions/setup-httpbin-server
        with:
          os: ${{ inputs.os }}
          ghcr_username: ${{ github.repository_owner }}
          ghcr_password: ${{ secrets.TOKEN_GITHUB }}
      - name: Setup coredumps location
        run: |
          mkdir ${{ github.workspace }}/coredumps
          sudo bash -c 'echo "${{ github.workspace }}/coredumps/%e.%p.%t" > /proc/sys/kernel/core_pattern'
      - run: make setup
      - run: make
      - name: Run tests
        run: |
          ulimit -c unlimited
          make test
      - name: Run lcov
        id: lcov
        if: ${{ !env.ACT && inputs.coverage }}
        run: |
          lcov --gcov-tool gcov-${CC#*-} --capture --directory work/buildroot --output-file lcov.info
          lcov --gcov-tool gcov-${CC#*-} --remove lcov.info "*/ngx_wasm_module/src/common/debug/*" --output-file lcov.info
          lcov --gcov-tool gcov-${CC#*-} --extract lcov.info "*/ngx_wasm_module/src/*" --output-file lcov.info

          name="unit"
          if [ -n "${{ inputs.openresty }}" ]; then
            name="$name-openresty_${{ inputs.openresty }}"
          else
            name="$name-ngx_${{ inputs.ngx }}"
          fi
          name="$name-${{ inputs.runtime }}"
          name="$name-${{ inputs.ipc }}"
          name="$name-${{ inputs.ssl }}"
          name="$name-${{ inputs.debug }}"
          name="$name-${{ inputs.hup }}"
          if [ "${{ inputs.module_type }}" = dynamic ]; then
            name="$name-dynamic"
          else
            name="$name-static"
          fi
          echo "name=$name" >> $GITHUB_OUTPUT
      - name: Coveralls Upload
        if: ${{ !env.ACT && inputs.coverage }}
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: ${{ steps.lcov.outputs.name }}
          path-to-lcov: './lcov.info'
          parallel: true
      - name: Codecov Upload
        if: ${{ !env.ACT && inputs.coverage }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: './lcov.info'
          flags: unit
      - run: rm -f t/servroot/html/nginx.sock
        if: ${{ failure() && !env.ACT }}
      - name: Artifacts Upload
        uses: actions/upload-artifact@v4
        if: ${{ failure() && !env.ACT }}
        with:
          name: ${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}-${{ inputs.ngx != '' && format('nginx-{0}', inputs.ngx) || format('openresty-{0}', inputs.openresty) }}-${{ inputs.runtime }}-${{ inputs.module_type == 'dynamic' && 'dynamic' || 'static'}}-${{ inputs.ipc }}-${{ inputs.ssl }}-${{ inputs.debug }}-${{ inputs.hup }}
          path: |
            work/buildroot/
            t/servroot*
            ${{ github.workspace }}/coredumps
      #- name: Setup tmate session
      #  if: ${{ failure() && !env.ACT }}
      #  uses: mxschmitt/action-tmate@v3
      - name: Cleanup
        if: ${{ always() }}
        uses: ./.github/actions/cleanup
