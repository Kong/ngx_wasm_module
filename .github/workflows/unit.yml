on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      cc:
        required: true
        type: string
      ngx:
        required: true
        type: string
      openresty:
        required: true
        type: string
      runtime:
        required: true
        type: string
      wasmer:
        required: true
        type: string
      wasmtime:
        required: true
        type: string
      v8:
        required: true
        type: string
      debug:
        required: true
        type: string
      hup:
        required: true
        type: string
      ssl:
        required: true
        type: string
      module_type:
        required: true
        type: string
    outputs:
      coveralls_name:
        description: "The first output string"
        value: ${{ jobs.reusable_tests.outputs.coveralls_name }}

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    outputs:
      coveralls_name: ${{ steps.lcov.outputs.name }}
    env:
      TEST_NGINX_TIMEOUT: 60
      TEST_NGINX_EXTERNAL_TIMEOUT: 120s
      TEST_NGINX_USE_HUP: ${{ inputs.hup == 'hup' && 1 || 0 }}
      CC: ${{ inputs.cc }}
      NGX: ${{ inputs.ngx }}
      NGX_BUILD_GCOV: 1
      NGX_BUILD_DEBUG: ${{ inputs.debug == 'debug' && 1 || 0 }}
      NGX_BUILD_DYNAMIC_MODULE: ${{ inputs.module_type == 'dynamic' && 1 || 0 }}
      NGX_BUILD_OPENRESTY: ${{ inputs.openresty }}
      NGX_BUILD_SSL: ${{ inputs.ssl == 'ssl' && 1 || 0 }}

    steps:
      - name: 'Setup deps - apt-get'
        if: ${{ inputs.cc == 'gcc-9' }}
        run: sudo apt-get update && sudo apt-get install -y gcc-9 libstdc++-9-dev lcov
      - uses: actions/checkout@v3
      - name: 'Setup cache - rustup toolchain'
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/*
            ~/.rustup/update-hashes/*
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('.github/**/*.yml', '.github/**/*.sh') }}
      - name: 'Setup cache - work/ dir'
        uses: actions/cache@v3
        if: ${{ !env.ACT }}
        with:
          path: |
            work/downloads
            work/runtimes
          key: work-${{ runner.os }}-${{ inputs.cc }}-${{ inputs.ngx }}-${{ inputs.openresty }}-${{ inputs.runtime }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-wasi
      - name: Setup TinyGo
        uses: acifani/setup-tinygo@v1
        with:
          tinygo-version: 0.27.0
      - name: Setup Wasm runtime
        run: ./util/runtime.sh -R ${{ inputs.runtime }} -V ${{ inputs[inputs.runtime] }}
      - run: make setup
      - run: make
      - run: make test
      - name: Run lcov
        id: lcov
        if: ${{ !env.ACT && inputs.cc == 'gcc-9' }}
        run: |
          name="unit"
          if [ -n "${{ inputs.openresty }}" ]; then
            name="$name-openresty_${{ inputs.openresty }}"
          else
            name="$name-ngx_${{ inputs.ngx }}"
          fi
          name="$name-${{ inputs.runtime }}"
          name="$name-${{ inputs.ssl }}"
          name="$name-${{ inputs.debug }}"
          name="$name-${{ inputs.hup }}"
          name="$name-${{ inputs.module_type == '' && 'static' || 'dynamic' }}"
          echo "name=$name" >> $GITHUB_OUTPUT

          name_hash=$(md5sum <<< "$name")
          service_number=$((0x${name_hash%% *}))
          echo "service_number=$service_number" >> $GITHUB_OUTPUT

          lcov --capture --directory work/buildroot --output-file lcov.info
          lcov --extract lcov.info "*/ngx_wasm_module/src/*" --output-file lcov.info
      - name: Coveralls Upload
        if: ${{ !env.ACT && inputs.cc == 'gcc-9' }}
        env:
          COVERALLS_SERVICE_NUMBER: ${{ steps.lcov.outputs.service_number }}
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: ${{ steps.lcov.outputs.name }}
          path-to-lcov: './lcov.info'
          parallel: true
      - uses: actions/upload-artifact@v2
        if: ${{ failure() && !env.ACT }}
        with:
          name: ${{ github.workflow }}-${{ github.job }}-sha-${{ github.sha }}-run-${{ github.run_number }}-${{ inputs.runtime }}
          path: |
            work/buildroot/
            t/servroot*

  finish:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          carryforward: "unit-ngx_1.25.1-wasmer-ssl-debug-no_hup-static,unit-ngx_1.25.1-wasmer-ssl-no_debug-no_hup-static,unit-ngx_1.25.1-wasmtime-ssl-debug-hup-static,unit-ngx_1.25.1-v8-ssl-debug-no_hup-static,unit-ngx_1.21.6-wasmer-ssl-debug-no_hup-static,unit-ngx_1.25.1-wasmer-no_ssl-no_debug-no_hup-static,unit-openresty_1.21.4.1-wasmtime-ssl-debug-no_hup-static,unit-openresty_1.21.4.1-wasmtime-ssl-debug-no_hup-dynamic"
