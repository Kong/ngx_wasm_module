ngx_found=no

if [ -z "$ngx_wasm_runtime_path" ]; then
    echo "$0: error: $ngx_addon_name auto/cargo invoked without \$ngx_wasm_runtime_path."
    echo
    exit 1
fi

if [ -z "$ngx_wasm_cargo_lib_name" ]; then
    echo "$0: error: $ngx_addon_name auto/cargo invoked without \$ngx_wasm_cargo_lib_name."
    echo
    exit 1
fi

# allow the feature test to find wasm.h
ngx_wasm_cargo_feature_path="$ngx_wasm_runtime_path"

ngx_wasm_push_dir=$(pwd)

cd $ngx_wasm_cargo_lib_dir

if [ "$NGX_WASM_CARGO_PROFILE" = "debug" ]; then
    ngx_wasm_cargo_profile=debug
    ngx_wasm_cargo_profile_flag=

else
    ngx_wasm_cargo_profile=release
    ngx_wasm_cargo_profile_flag=--release
fi

cargo build \
    --lib \
    --target-dir $ngx_wasm_cargo_lib_dir/target \
    $ngx_wasm_cargo_profile_flag \
    $ngx_wasm_cargo_flags

ngx_wasm_rc=$?

ngx_wasm_cargo_target_dir=$ngx_wasm_cargo_lib_dir/target/$ngx_wasm_cargo_profile

cd $ngx_wasm_push_dir

if [ $ngx_wasm_rc = 0 ]; then
    ngx_feature="$ngx_wasm_cargo_lib_name"
    ngx_feature_incs="$ngx_wasm_cargo_feature_incs"
    ngx_feature_test="$ngx_wasm_cargo_feature_test"

    if [ "$ngx_wasm_cargo_crate_type" = "cdylib" ]; then
        ngx_feature_libs="\
            -L$ngx_wasm_cargo_target_dir \
            -l$ngx_wasm_cargo_lib_name"

        if [ "$NGX_RPATH" = YES ]; then
            ngx_feature_libs="\
                -R $ngx_wasm_cargo_target_dir \
                -R $NGX_PREFIX/lib \
                $ngx_feature_libs"

        elif [ "$NGX_WASM_RUNTIME_NO_RPATH" != 1 ]; then
            case "$NGX_PLATFORM" in
                Darwin:*)
                    ngx_feature_libs="\
                        -Wl,-rpath,$ngx_wasm_cargo_target_dir \
                        -Wl,-rpath,$NGX_PREFIX/lib \
                        $ngx_feature_libs"
                ;;
                *)
                    ngx_feature_libs="\
                        -Wl,-rpath=$ngx_wasm_cargo_target_dir \
                        -Wl,-rpath=$NGX_PREFIX/lib \
                        $ngx_feature_libs"
                ;;
            esac
        fi

    else
        ngx_feature_libs="$ngx_wasm_cargo_target_dir/lib$ngx_wasm_cargo_lib_name.a"
    fi

    ngx_feature_path="-I $ngx_wasm_cargo_lib_dir/include $ngx_wasm_cargo_feature_path"
    ngx_feature_run=yes

    . auto/feature

    if [ $ngx_found = yes ]; then

        if [ "$ngx_wasm_cargo_crate_type" = cdylib ]; then
            case "$NGX_PLATFORM" in
                Darwin:*)
                    ngx_wasm_cargo_cdylib="$ngx_wasm_cargo_target_dir/lib$ngx_wasm_cargo_lib_name.dylib"
                ;;
                *)
                    ngx_wasm_cargo_cdylib="$ngx_wasm_cargo_target_dir/lib$ngx_wasm_cargo_lib_name.so"
                ;;
            esac

            ngx_wasm_cargo_cdylibs="$ngx_wasm_cargo_cdylibs $ngx_wasm_cargo_cdylib"

            if ! grep -q ngx_wasm_cargo_cdylib auto/install; then
                cat << EOF >> auto/install

for ngx_wasm_cargo_cdylib in \$ngx_wasm_cargo_cdylibs
do

cat << END                                                    >> \$NGX_MAKEFILE

	test -d '\\\$(DESTDIR)\$NGX_PREFIX/lib' \\
		|| mkdir -p '\\\$(DESTDIR)\$NGX_PREFIX/lib'
	cp \$ngx_wasm_cargo_cdylib '\\\$(DESTDIR)\$NGX_PREFIX/lib'
END

done
EOF
            fi
        fi

    else
        echo "$0: error: $ngx_addon_name failed testing lib$ngx_wasm_cargo_lib_name."
    fi

else
    echo "$0: error: $ngx_addon_name failed building lib$ngx_wasm_cargo_lib_name."
fi

if [ $ngx_found = no ]; then
    if [ $ngx_wasm_cargo_mandatory = yes ]; then
        echo "$0: error: $ngx_addon_name with $NGX_WASM_RUNTIME requires lib$ngx_wasm_cargo_lib_name - aborting."
        echo
        exit 1
    fi

    echo "$0: warning: the following functionality is not available for $ngx_addon_name: $ngx_wasm_cargo_defines"

    have=NGX_WASM_CARGO_FAILED value=1 . auto/define
fi

# vim:ft=sh ts=4 sts=4 sw=4:
